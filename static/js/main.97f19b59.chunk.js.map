{"version":3,"sources":["components/Node/Node.jsx","components/PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","PathfindingVisualizer","state","grid","mousePressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","onClick","visualizeDijkstra","map","rowIdx","key","node","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97f19b59.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    render() {\n        const {col, isFinish, isStart, isWall, onMouseDown, onMouseEnter, onMouseUp, row} = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n            ? 'node-start'\n            : isWall\n            ? 'node-wall'\n            : '';\n\n        return (\n            <div \n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`} \n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            />\n        )\n    }\n}\n\nexport const DEFAULT_NODE = {\n    row: 0,\n    col: 0,\n};","import React, {Component} from 'react';\nimport Node from '../Node/Node';\n\nimport './PathfindingVisualizer.css';\n\n// Setting node placement variables\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mousePressed: false,\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n        // const nodes = [];\n        // // Nested for loop to render grid (rows & cols) of nodes\n        // for (let row = 0; row < 15; row++) {\n        //     const currentRow = [];\n        //     for (let col = 0; col < 50; col++) {\n        //         currentRow.push([]);\n        //     }\n        //     nodes.push(currentRow);\n        // }\n        // this.setState({nodes});\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mousePressed: true});\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mousePressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n\n    handleMouseUp() {\n        this.setState({mousePressed: false});\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n\n    }\n\n    visualizeDijkstra() {\n\n    }\n\n    render() {\n        const {grid, mousePressed} = this.state;\n\n        return (\n            <>\n                <button onClick={() => this.visualizeDijkstra()}>\n                    Visualize Dijkstra's Algorithm\n                </button>\n            \n                <div className='grid'>\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const {row, col, isStart, isFinish, isWall} = node;\n                                    return (\n                                        <Node \n                                            key={nodeIdx} \n                                            col={col} \n                                            isStart={isStart} \n                                            isFinish={isFinish} \n                                            isWall={isWall} \n                                            mousePressed={mousePressed} \n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)} \n                                            onMouseEnter={(row, col) => \n                                                this.handleMouseEnter(row, col)\n                                            }\n                                            onMouseUp={() => this.handleMouseUp()}\n                                            row={row}\n                                        />\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\n// Functions \n// ================================================================================\nconst getInitialGrid = () => {\n    const grid = [];\n    // iterate through rows and cols to create grid\n    for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    // Create the nodes and their placement on the grid\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n    }\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};","import React from 'react';\nimport PathfindingVisualizer from './components/PathfindingVisualizer/PathfindingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}