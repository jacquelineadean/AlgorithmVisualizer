{"version":3,"sources":["components/Node/Node.jsx","utils/dijkstra.js","components/PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","state","mousePressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.038d6448.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    render() {\n        const {col, isFinish, isStart, isWall, onMouseDown, onMouseEnter, onMouseUp, row} = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n            ? 'node-start'\n            : isWall\n            ? 'node-wall'\n            : '';\n\n        return (\n            <div \n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`} \n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            />\n        )\n    }\n}\n\nexport const DEFAULT_NODE = {\n    row: 0,\n    col: 0,\n};","// Dijkstra's algorithm \n    // returns all nodes in the order in which they were visited\n    // makes node point back to their previous node\n        // allows for computation of the the shortest path by backtracking from the finish node \n\nexport function dijkstra(grid, startNode, finishNode) {\n    // Store ordered list of nodes visited \n    const visitedNodesInOrder = [];\n    // Initial distance\n    startNode.distance = 0;\n    // unvisited nodes are initially set to nodes in the graph\n    const unvisitedNodes = getAllNodes(grid);\n    // Loop will execute while there are unvisited nodes\n    while (!!unvisitedNodes.length) {\n        // Sort by distance\n        sortNodesByDistance(unvisitedNodes);\n        // Return the value of the closest node and remove it from the unvisited nodes array\n        const closestNode = unvisitedNodes.shift();\n        // if wall, skip\n        if (closestNode.isWall) { \n            continue;\n        }\n        // if the closest node is at a distance of infinity, stop\n        if (closestNode.distance === Infinity) {\n            return visitedNodesInOrder;\n        }\n        // Update state\n        closestNode.isVisited = true;\n        // Add closestNode to the array of visited nodes\n        visitedNodesInOrder.push(closestNode);\n        // if closest node is the finish node, stop\n        if (closestNode === finishNode) {\n            return visitedNodesInOrder;\n        }\n        // \n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\n// Sort the unvisited nodes by relative distance\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\n// Transform neighbors into a linked list \nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    // Store distance from node to neighboring and point to their previous node (node)\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\n// Get neighboring nodes where visited is false\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    // add surrounding nodes to neighbors array\n    if (row > 0) {\n        neighbors.push(grid[row - 1][col]);\n    } \n    if (row < grid.length -1){\n        neighbors.push(grid[row + 1][col]);\n    } \n    if (col > 0) {\n        neighbors.push(grid[row][col + 1]);\n    }\n    if (col < grid[0].length - 1) {\n        neighbors.push(grid[row][col + 1]);\n    }\n    // return filtered neighbors array of nodes that have not been visited \n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path\n// Only works when called after the dijkstra method above\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder; \n}","import React, {Component} from 'react';\nimport Node from '../Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../../utils/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\n// Setting node placement variables\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mousePressed: false,\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mousePressed: true});\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mousePressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n\n    handleMouseUp() {\n        this.setState({mousePressed: false});\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i<= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n            setTimeout(() => {\n                const node = nodesInShortestPathOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n            }, 50 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const {grid} = this.state;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    render() {\n        const {grid, mousePressed} = this.state;\n\n        return (\n            <>\n                <button onClick={() => this.visualizeDijkstra()}>\n                    Visualize Dijkstra's Algorithm\n                </button>\n            \n                <div className='grid'>\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const {row, col, isStart, isFinish, isWall} = node;\n                                    return (\n                                        <Node \n                                            key={nodeIdx} \n                                            col={col} \n                                            isStart={isStart} \n                                            isFinish={isFinish} \n                                            isWall={isWall} \n                                            mousePressed={mousePressed} \n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)} \n                                            onMouseEnter={(row, col) => \n                                                this.handleMouseEnter(row, col)\n                                            }\n                                            onMouseUp={() => this.handleMouseUp()}\n                                            row={row}\n                                        />\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\n// Functions \n// ================================================================================\nconst getInitialGrid = () => {\n    const grid = [];\n    // iterate through rows and cols to create grid\n    for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    // Create the nodes and their placement on the grid\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n    }\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};","import React from 'react';\nimport PathfindingVisualizer from './components/PathfindingVisualizer/PathfindingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}